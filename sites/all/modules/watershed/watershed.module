<?php
/**
 * @file
 * A module that displays data from the RiMDB database.
 */

/**
 * Implements hook_help
 *
 * Displays help info
 *
 * @param $path
 * The path of the site that we're using to display help
 * @param $arg
 * Array that holds the current path as returned from the arg() function
 */
function watershed_help($path, $arg) {
	switch ($path) {
		case "admin/help#watershed":
			return '<p>'.  t("Watershed info display system") .'</p>';
			break;
	}
}

/**
 * Implements hook_block_info
 *
 * @return multitype:string NULL
 */
// function watershed_block_info() {
// 	$blocks['watershed'] = array(
// 			'info' => t('Watershed Block'), //The name that will appear in the block list.
// 			'cache' => DRUPAL_CACHE_PER_PAGE, //Changes depending on the current page
// 	);
// 	return $blocks;
// }

/**
 * Custom content function.
 *
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 *
 * @return
 *   A result set of the targeted posts.
 */
// function watershed_block_contents($display){
// 	//Get today's date.
// 	$today = getdate();
// 	//Calculate the date a week ago.
// 	$start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
// 	//Get all posts from one week ago to the present.
// 	$end_time = time();

// 	$max_num = variable_get('watershed_posts_max', 3);

// 	//Use Database API to retrieve current posts.
// 	$query = db_select('node', 'n')
// 	->fields('n', array('nid', 'title', 'created'))
// 	->condition('status', 1) //Published.
// 	->condition('created', array($start_time, $end_time), 'BETWEEN')
// 	->orderBy('created', 'DESC'); //Most recent first.

//   if($display == 'block') {
//     // Restrict the range if called with 'block' argument.
//   	$query->range(0, $max_num);
//   }

// 	return $query->execute();
// }

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
// function watershed_block_view($delta = '') {
// 	switch($delta){
// 		case 'watershed':
// 			$block['subject'] = t('Watershed Block');
	
// 			if(user_access('access content')){
// 				//Use our custom function to retrieve data.
// 				$result = watershed_block_contents('block');
// 				//Array to contain items for the block to render.
// 				$items = array();
// 				//Iterate over the resultset and format as links.
// 				foreach ($result as $node){
// 					$items[] = array(
// 							'data' => l($node->title, 'node/' . $node->nid),
// 					);
// 				}

// 				if (empty($items)) { //No content in the last week.
// 					$block['content'] = t('No posts available.');
// 				}
// // 				else {
// // 					//Pass data through theme function.
// // 					$block['content'] = theme('item_list', array(
// // 							'items' => $items));
// // 				}
// 				else {
// 					//Pass data through theme function.
// 					$block['content']['posts'] = array(
// 				    '#theme' => 'item_list__watershed_posts__block',
// 				    '#items' => $items,
// 					);
// 					//Add a link to the page for more entries.
// 					$block['content']['more'] = array(
// 					    '#theme' => 'more_link__watershed_posts',
// 					    '#url' => 'watershed_posts',
// 					    '#title' => t('See the full list of rimdb posts.'),
// 					);
// 				}
// 			} // end if(user_access(...))
	
// 		return $block;
// 	}
// }

/**
 * Implements hook_menu().
 */
// function rimdb_menu() {
// 	$items = array();

// 	$items['admin/config/content/watershed'] = array(
// 			'title' => 'Watershed Info Config',
// 			'description' => 'Configuration for the Watershed Info module',
// 			'page callback' => 'drupal_get_form',
// 			'page arguments' => array('watershed_form'),
// 			'access arguments' => array('access administration pages'),
// 			'type' => MENU_NORMAL_ITEM,
// 	);

// 	$items['watershed_posts'] = array(
// 			'title' => 'Watershed posts',
// 			'page callback' => '_watershed_posts_page',
// 			'access arguments' => array('access watershed content'),
// 			//'type' => MENU_NORMAL_ITEM, //Will appear in Navigation menu.
// 			'type' => MENU_CALLBACK, // will not appear in Nav menu, but has a path and attributes
// 	);

// 	return $items;
// }

// /**
//  * Form function, called by drupal_get_form()
//  * in rimdb_menu().
//  */
// function watershed_form($form, &$form_state) {
// 	$form['watershed_posts_max'] = array(
// 			'#type' => 'textfield',
// 			'#title' => t('Maximum number of posts'),
// 			'#default_value' => variable_get('watershed_posts_max', 3),
// 			'#size' => 2,
// 			'#maxlength' => 2,
// 			'#description' => t('The maximum number of links to display in the block.'),
// 			'#required' => TRUE,
// 	);

// 	return system_settings_form($form);
// }

// function hook_node_view($node, $view_mode, $langcode) {
// 	if( $node['field_ref_region']) {
// 		echo 'yes';
// 	}
// }


function watershed_test_form($form, &$form_state) {

	// 	$form['line_param_site_alltime'] = array(
	// 		  '#type' => 'checkbox',
	// 		  '#title' => t('Line Series: Parameter x Site x All Months'),
	// 	);
	$form['update_sites'] = array(
		  '#type' => 'checkbox', 	
		  '#title' => t('Update Sites'),
	);
	
	$form['import_xml'] = array(
	  '#type' => 'checkbox', 	
	  '#title' => t('Import XML into Database'),
	);
	
	$form['paramcols_line_param_regions_alltime'] = array(
	  '#type' => 'checkbox',
	  '#title' => t('Time Series: Parameter x StationCat x Month from multiple parameter columns'),
	);
	
	$form['line_param_regionsites_alltime'] = array(
	  '#type' => 'checkbox', 	
	  '#title' => t('Time Series: Parameter x StationCat x Month from a single (mixed) parameter column'),
	);

	// 	$form['line_param_allsites_alltime'] = array(
	// 	  '#type' => 'checkbox',
	// 	  '#title' => t('Line Series: Parameter x All Sites x All Months'),
	// 	);
	// 	$form['box_param_regionsites_alltime'] = array(
	// 		  '#type' => 'checkbox',
	// 		  '#title' => t('Box Plot: Parameter x Sites in Region x All Months'),
	// 	);
	// 	$form['box_param_allsites_alltime'] = array(
	// 			  '#type' => 'checkbox',
	// 			  '#title' => t('Box Plot: Parameter x All Sites x All Months'),
	// 	);

	$form['submit'] = array(
			'#type'  =>  'submit',
	    '#value' => 'Generate',
	);

	return $form;
}

// /**
//  * Implements validation from the Form API.
//  *
//  * @param $form
//  *   A structured array containing the elements and properties of the form.
//  * @param $form_state
//  *   An array that stores information about the form's current state
//  *   during processing. See drupal_build_form() for a list of $form_state keys.
//  */
// function watershed_form_validate($form, &$form_state){
// 	$max_num = $form_state['values']['watershed_posts_max'];
// 	if (!is_numeric($max_num)){
// 		form_set_error('watershed_posts_max', t('You must enter an integer for the maximum number of posts to display.'));
// 	}
// 	else if ($max_num <= 0){
// 		form_set_error('watershed_posts_max', t('Maximum number of posts to display must be positive.'));
// 	}
// }

function _random_color(){
	return _random_hex() . _random_hex() . _random_hex();
}

function _random_hex(){
	return str_pad(strtoupper(dechex(rand(10,245))), 2, '0', STR_PAD_LEFT);
}
function _embed($contents, $mime) {
	return ('data:' . $mime . ';base64,' . base64_encode($contents));
}

function watershed_test_form_validate($form, &$form_state){

	if ( arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2) ) {
		$autogen = node_load(arg(1));
		// Do something with $node
		//print_r( $node );
		$lang = $autogen->language;
		
	} else
	form_set_error('watershed_test_form', t('Unable to recognize the node ID'));

	$q1 = 'select nid, title FROM node where type = "watershed_organization"';
	$os = db_query($q1);
	$orgs = array();
	foreach($os as $o) {
		$orgs[$o->nid] = $o->title;
	}
	
	$q = 'select nid, title from node where type = "watershed_site"';
	$ss = db_query($q);
	foreach($ss as $s) {
		$site = node_load($s->nid);
		$found = false;
		foreach($orgs as $nid => $title){
		//$site->field_ref_organization[$lang][0]['nid'] = 
			if(stripos($s->title, $title) !== false){
				$site->field_ref_organization[$lang][0]['nid'] = $nid;
				$found = true;
			}
		}
		if(!$found) {
			$keys = array_keys($orgs);
			$site->field_ref_organization[$lang][0]['nid'] = $keys[0];
		}
		$site = node_submit($site); // Prepare node for a submit
		node_save($site);
	}
	

	form_set_error('watershed_test_form', t('Fake error'));
}


function watershed_test_form_submit($form, &$form_state){


	if ( arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2) ) {
		$autogen = node_load(arg(1));
	}

	//$csvfile = "ya";


	$batch = array(
	  'title' => t('Importing Data'),
    'init_message' => t('Data import is starting.'),
		'operations' => array(
		//array('load_xml', array($autogen)),
	),
	  'finished' => 'autogen_finished_callback',
	//'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Data import has encountered an error.'),
	//'file' => drupal_get_path('module', 'batch_example') . '/batch_example.inc',
	);

	// 	echo "line_param_site_alltime = " + $form_state['values']['line_param_site_alltime'];
	// 	echo "line_param_regionsites_alltime = " + $form_state['values']['line_param_regionsites_alltime'];
	// 	echo "line_param_allsites_alltime = " + $form_state['values']['line_param_allsites_alltime'];
	// 	echo "box_param_region_alltime = " + $form_state['values']['box_param_region_alltime'];
	// 	echo "box_param_allsites_alltime = " + $form_state['values']['box_param_allsites_alltime'];


	// 	if($form_state['values']['line_param_site_alltime']){
	// 		$batch['operations'][] = array('autogen_line_param_site_alltime', array($autogen));
	// 	}
	
	
       if($form_state['values']['import_xml']){
                $batch['operations'][] = array('load_xml', array($autogen));
        }
        
        if($form_state['values']['paramcols_line_param_regions_alltime']){
        	$batch['operations'][] = array('autogen_line_param_stationcat_month_paramcols', array($autogen));
        }
        
        
        if($form_state['values']['line_param_regionsites_alltime']){
		$batch['operations'][] = array('autogen_line_param_regionsites_alltime', array($autogen));
	}
	// 	if($form_state['values']['line_param_allsites_alltime']){
	// 		$batch['operations'][] = array('autogen_line_param_allsites_alltime', array($autogen));
	// 	}
	// 	if($form_state['values']['box_param_region_alltime']){
	// 		$batch['operations'][] = array('autogen_box_param_region_alltime', array($autogen));
	// 	}
	// 	if($form_state['values']['box_param_allsites_alltime']){
	// 		$batch['operations'][] = array('autogen_box_param_allsites_alltime', array($autogen));
	// 	}

	//print_r($batch);

	batch_set($batch);

}

/**
 * Batch Operation Callback
 *
 * Each batch operation callback will iterate over and over until
 * $context['finished'] is set to 1. After each pass, batch.inc will
 * check its timer and see if it is time for a new http request,
 * i.e. when more than 1 minute has elapsed since the last request.
 *
 * An entire batch that processes very quickly might only need a single
 * http request even if it iterates through the callback several times,
 * while slower processes might initiate a new http request on every
 * iteration of the callback.
 *
 * This means you should set your processing up to do in each iteration
 * only as much as you can do without a php timeout, then let batch.inc
 * decide if it needs to make a fresh http request.
 *
 * @param options1, options2
 *   If any arguments were sent to the operations callback, they
 *   will be the first argments available to the callback.
 *
 * @param context
 *   $context is an array that will contain information about the
 *   status of the batch. The values in $context will retain their
 *   values as the batch progresses.
 *
 * @param $context['sandbox']
 *   Use the $context['sandbox'] rather than $_SESSION to store the
 *   information needed to track information between successive calls.
 *   The values in the sandbox will be stored and updated in the database
 *   between http requests until the batch finishes processing. This will
 *   avoid problems if the user navigates away from the page before the
 *   batch finishes.
 *
 * @param $context['results']
 *   The array of results gathered so far by the batch processing.
 *   The current operation can append its own.
 *
 * @param $context['message']
 *   A text message displayed in the progress page.
 *
 * @param $context['finished']
 *   A float number between 0 and 1 informing the processing engine
 *   of the completion level for the operation.
 *
 *   1 (or no value explicitly set) means the operation is finished
 *   and the batch processing can continue to the next operation.
 */
function load_xml($autogen, &$context) {
	if (!isset($context['sandbox']['progress'])) {
		$context['sandbox']['progress'] = 0;
		//$context['sandbox']['max'] = 0;
		//$context['message'] = t('Now processing %node', array('%node' => $autogen->title));
		//$uid = 'select uid from users where name = "syrcl"";';
		//$uid = db_query('SELECT uid FROM {users} where name = %s', 'syrcl')->fetchField();
		//$result = db_query_range("SELECT nid FROM {node} WHERE nid > %d ORDER BY nid ASC", $context['sandbox']['current_node'], 0, $limit);
	}

	$lang = $autogen->language;
	$file_path = drupal_realpath($autogen->field_file[$lang][0]['file']->uri);
	$tablename = db_escape_table(basename($file_path, ".xml"));

	//echo $file_path;

	// 		$reader = new XMLReader();
	// 		$reader->open($file_path);
	// 		$reader->read();
	// 		echo "first node: " . $reader->readOuterXml();
	// // 		while ($reader->read()) {
	// // 			switch ($reader->nodeType) {
	// // 				case (XMLREADER::ELEMENT):
	// // 					if ($reader->localName == "entry") {
	// // 						if ($reader->getAttribute("ID") == 5225) {
	// // 							while ($reader->read()) {
	// // 								if ($reader->nodeType == XMLREADER::ELEMENT) {
	// // 									if ($reader->localName == "title") {
	// // 										$reader->read();
	// // 										echo $reader->value;
	// // 										break;
	// // 									}
	// // 									if ($reader->localName == "entry") {
	// // 										break;
	// // 									}
	// // 								}
	// // 							}
	// // 						}
	// // 					}
	// // 			}
	// // 		}


		$xml = simplexml_load_file($file_path);
		$rows = $xml->children();
		//$context['sandbox']['xml'] = $children;
		//$context['results']['xml'] = $children;

		if(!isset($context['sandbox']['max']))
		$context['sandbox']['max'] = count($rows);

		//$tablename = db_escape_table($rows[0]->getName());
		$context['results']['tablename'] = $tablename;
		$_SESSION['table'] = $tablename;
		$conn =  Database::getConnection('import', 'import');
		//$context['sandbox']['conn'] = $conn;

		if($context['sandbox']['progress'] == 0) {
			$conn->query('DROP TABLE IF EXISTS ' . $tablename . ';');
			$conn->query('CREATE TABLE ' . $tablename . ' (site INTEGER, date TEXT, parameter TEXT, replicates INTEGER, result REAL, resqualcode TEXT);'); //, PRIMARY KEY(site, date, parameter));');
			//$context['finished'] = 0.01;
			//drupal_set_message('move_xml_to_sqlite!!');
			//return;
		}


		//$conn =  Database::getConnection('import', 'import');

		//drupal_set_message('move_xml_to_sqlite!!');
		$numrecords = 2000;
		$start = $context['sandbox']['progress'];
		$end = $start + $numrecords;
		if($context['sandbox']['max'] < $end)
		$end = $context['sandbox']['max'];

		//$rows = $context['sandbox']['xml'];
		//$rows = $context['results']['xml'];
		//for($i = 0; $i < 10; $i++)
		//echo '# children: ' . count($children);
		for($i = $start; $i < $end; $i++)
		{
			//echo $children[$i]->getName() . "<br />";
			$cellvals = array();
			foreach($rows[$i]->children() as $cell)
			{
				//$cellvalues[db_escape_field($cell->getName())] = $cell;
				$cellvals[] = (string)$cell;
				//echo $cellname . ": " . $child . " | ";
			}
			if(count($cellvals) < 5)
			continue;
			//echo "<br />\n";
			//$conn->query( "INSERT INTO " . $tablename . " VALUES (:date, :site, :param, :rep, :result)", array (':date' => quoted_printable_encode( (string)$cellvals[0] ), ':site' => (int)$cellvals[1], ':param' => (string)$cellvals[2] , ':rep' => (string)$cellvals[3], ':result' => (float)$cellvals[4]));
			$conn->query( "INSERT INTO " . $tablename . " VALUES (:vals)", array (':vals' => $cellvals ));
			$context['sandbox']['progress'] = $i;
		}
		$context['results']['values'] = $i;
		$context['finished'] = $i / $context['sandbox']['max'];
		//echo "file path = " . $file_path;
		///$result = db_query('.');
		//echo "sqlite .tables returns this many records: " . $conn->exec('.tables');
}

function autogen_line_param_site_alltime($autogen, &$context) {
	drupal_set_message('autogen_line_param_site_alltime!!');

	$lang = $autogen->language;
	$file_path = drupal_realpath($autogen->field_file[$lang][0]['file']->uri);
	$tablename = db_escape_table(basename($file_path, ".xml"));
	$conn = Database::getConnection('import', 'import');

	$sites = $conn->query("select distinct site from ". $tablename ." where site < 65 order by site;");
	foreach($sites as $dbsite) {
		$site = $dbsite->site;
		echo "site: ". $site ."<br/>";
		$values = array();
		// get em all in one query
		$results = $conn->query('select parameter, date, result from ' . $tablename . ' where parameter != "NULL" and site = :site;', array(':site' => $site));
		foreach($results as $result) {
			$values[$result->parameter][$result->date] = $result->result;
		}

		foreach($values as $parameter => $pvalues) {
			echo "&nbsp;&nbsp;param: ". $parameter ."<br/>";
			foreach($pvalues as $date => $value){
				echo "&nbsp;&nbsp;&nbsp;&nbsp;date: " . $date . ", value: " . $value ."<br/>";
			}
		}
		break;
	}



	if(!isset($context['sandbox']['sites'])){
		$dbsites = $conn->query("select distinct site from ". $tablename ." where site < 65 order by site;");
		$sites = array();
		foreach($dbsites as $dbsite) {
			$sites[] = $dbsite->site;
		}

		$context['sandbox']['sites'] = $sites;
		$context['sandbox']['siteidx'] = 0;
		$context['sandbox']['sitemax'] = count($sites);
	}

	$sites = $context['sandbox']['sites'];
	$start = $context['sandbox']['siteidx'];
	$smax = $context['sandbox']['sitemax'];

	$processNum = 1;
	$end = $start + processNum;
	if($end > $smax)
	$end = $smax;

	for($s = $start; $s < $end; $s++) {

		$site = $sites[$s];
		//echo "site: " . $site;

		$values = array();
		$results = $conn->query('select parameter, date, result from ' . $tablename . ' where parameter != "NULL" and site = :site;', array(':site' => $site));
		foreach($results as $result) {
			$values[$result->parameter][$result->date] = $result->result;
		}

		foreach($values as $parameter => $paramvals) {

			/*
			 $data = new stdClass(); // We create a new node object
			$data->type = "watershed_data";
			//$data->title =
			$data->language = $lang;
			$data->uid = $autogen->uid;
			//$data->path = array('alias' => 'your node path'); // Setting a node path
			node_object_prepare($data); // Set some default values.

			// Let's add standard body field
			//$data->body[$lang][0]['value'] = 'This is a body text';
			//$data->body[$lang][0]['summary'] = 'Here goes a summary';
			//$data->body[$lang][0]['format'] = 'filtered_html';
			// If field has a format, you need to define it. Here we define a default filtered_html format for a body field

			// Let's add some CCK/Fields API field. This is pretty similar to the body example
			$data->field_custom_name[$lang][0]['value'] = 'This is a custom field value';
			// If your custom field has a format, don't forget to define it here
			$data->field_custom_name[$lang][0]['format'] = 'This is a custom field value';
			// And etc. you can add as much fields here as your content type has. The sky is the limit... and the server specs, of course ;)

			$get_region_nid = 'select field_ref_region_nid from field_data_field_ref_region where entity_id = 13;';
			$region_nid = db_query('select field_ref_region_nid from {field_data_field_ref_region} where entity_id = %d', 12)->fetchField();

			$nid = db_query('select entity_id from {field_data_field_id} where field_id_value = %s', $val)->fetchField();

			// Some file on our system
			//$file_path = drupal_realpath('somefile.png'); // Create a File object
			// 	$file = (object) array(
			// 	          'uid' => 1,
			// 	          'uri' => $file_path,
			// 	          'filemime' => file_get_mimetype($filepath),
			// 	          'status' => 1,
			// 	);
			//	$file = file_copy($file, 'public://'); // Save the file to the root of the files directory. You can specify a subdirectory, for example, 'public://images'
			//$file = $autogen['field_file'][$lang][0]['file']
			//$data->field_file[LANGUAGE_NONE][0] = (array)$file; //associate the file object with the image field:
				
			$data->field_file = $autogen->field_file;

			$node->field_tags[$lang][]['tid'] = 1;

			$node = node_submit($node); // Prepare node for a submit
			node_save($node); // After this call we'll get a nid
			*/

		} // end foreach ($values)


		// 			$results = $conn->query('select date, result from '. $tablename .' where parameter = :param and site = :site order by date;', array(':param' => $parameter, ':site' => $site));
		// 			foreach($results as $result) {
		// 			}
			

		// save the current position
		$context['sandbox']['siteidx'] = $s;
	}



	$context['finished'] = $context['sandbox']['siteidx'] / $context['sandbox']['sitemax'];
}


function autogen_line_param_regionsites_alltime($autogen, &$context) {
	//drupal_set_message('autogen_line_param_regionsites_alltime!!');

	$libname = 'googlechartphplib';
	$path = libraries_get_path($libname);
	// Do something with the library, knowing the path, for instance:
	// drupal_add_js($path . '/example.js');
	require_once($path ."/lib/GoogleChart.php");
	require_once($path ."/lib/markers/GoogleChartShapeMarker.php");
	require_once($path ."/lib/markers/GoogleChartTextMarker.php");


	$lang = $autogen->language;
	$file_path = drupal_realpath($autogen->field_file[$lang][0]['file']->uri);
	$tablename = db_escape_table(basename($file_path, ".xml"));
	$conn = Database::getConnection('import', 'import');

	if(!isset($context['sandbox']['parameters'])) {

		// get station ids for each stationcat
		$q = 'select {field_data_field_id}.entity_id as site_nid, field_stationcat_value as stationcat, field_id_value as siteid from {field_data_field_id}, {field_data_field_stationcat} where {field_data_field_id}.entity_id = {field_data_field_stationcat}.entity_id order by siteid, stationcat;';
		/*
		 495|LY|16
		496|LY|17
		526|LYT|47
		516|MY|37
		*/
		$regions = array();
		$results = db_query($q);
		foreach($results as $result) {
			$regions[$result->stationcat][] = $result->siteid;
		}
		$context['sandbox']['regions'] = $regions;
		$context['sandbox']['regionidx'] = 0;
		$context['sandbox']['regionmax'] = count($regions);

		$parameters = array();
		$results = $conn->query('select distinct parameter from ' . $tablename . ' where parameter != "NULL"');
		foreach($results as $result) {
			$parameters[] = $result->parameter;
		}
		$context['sandbox']['parameters'] = $parameters;
		$context['sandbox']['parameteridx'] = 0;
		$context['sandbox']['parametermax'] = count($parameters);

	}

	// prepare parameter batch loop vars
	$parameters = $context['sandbox']['parameters'];
	$paramstart = $context['sandbox']['parameteridx'];
	$parammax   = $context['sandbox']['parametermax'];

	$paramProcessNum = 20; // process this number of params per batch
	$paramend = $paramstart + $paramProcessNum;
	if($paramend > $parammax)
		$paramend = $parammax;

	// prepare region batch loop vars
	$regions     = $context['sandbox']['regions'];
	$regionstart = $context['sandbox']['regionidx'];
	$regionmax   = $context['sandbox']['regionmax'];

	$regionProcessNum = 20;
	$regionend = $regionstart + $regionProcessNum;
	if($regionend > $regionmax)
	$regionend = $regionmax;

	for($p = $paramstart; $p < $paramend; $p++) {
		$parameter = $parameters[$p];

		//echo " {$parameter} <br/>";
		// process all regions for this parameter
		$paramValMax = 0;
		$paramValMin = 0;

		// 		$maxsiteregion = null;
		// 		$maxsitecount = 0;

		// 		foreach($regions as $region => $sites){
		// 			$count = count($sites);
		// 			if($count > $maxsitecount){
		// 				$maxsiteregion = $region;
		// 				$maxsitecount = $count;
		// 			}
		// 		}

		//foreach($regions as $region => $sites) {
		for($r = $regionstart; $r < $regionend; $r++) {
			$regionkeys = array_keys($regions);
			$region = $regionkeys[$r];
			$sites = $regions[$region];
			// 			$region = $maxsiteregion;
			// 			$sites = $regions[$region];
			//echo " {$region} <br/>";

			$q = "select strftime('%Y-%m',date) as date, site, result from " . $tablename . ' where parameter = :parameter and (';
			$wheres = array();
			$wheres[':parameter'] = $parameter;
			for($s = 0; $s < count($sites); $s++){
				if($s != 0) $q.= ' or ';

				$varname = ':site' . $s;
				$q .= ' site = ' . $varname;
				$wheres[$varname] = $sites[$s];
			}
			$q .=")";
			$q .=" order by date, site";
			//echo $q ."<br/>";
			//print_r($wheres);


			$results = $conn->query($q, $wheres);
			$valsBySite = array();
			$dates = array();
			$regMax[$region] = 0;
			$regMin[$region] = 0;

			foreach($results as $result){
				// store values
				$valsBySite[$result->site][$result->date] = $result->result;
				$dates[] = $result->date;

				// store max and min for each region and for all regions
				if($result->result > $regMax[$region])
				$regMax[$region] = $result->result;
				else if($result->result < $regMin[$region])
				$regMin[$region] = $result->result;
				if($result->result > $paramValMax)
				$paramValMax = $result->result;
				else if($result->result < $paramValMin)
				$paramValMin = $result->result;
			}


			$start = new DateTime($dates[0]);
			//echo " start: " . $start->format("Y-m-d");
			$end = new DateTime($dates[count($dates)-1]);
			//echo " end: " . $end->format("Y-m-d");
			$diff = $start->diff($end);
			//echo " diff: " . $diff->format("%Y-%m-%d");
			$numMonths = (($diff->y * 12) + $diff->m);
			//echo " months: " . $numMonths;
			$cur = clone $start;

			$xlbl = array();
			$xlblpos = array();
			$x2lbl = array();
			$x2lblpos = array();
			$slots = $numMonths + 2;
			$slice = 100/$slots;
			$slicei = 1;
			$xdates = array();

			for($i = 1; $i < $slots - 1; $i++){
				$xdates[$i] = $cur->format("Y-m");
				switch($cur->format("m")){
					// 					case '3':
					// 	 					echo " Mar";
					// 	 					$xlbl[] = "Mar";
					// 	 					$xlblpos[] = $i * $slice;
					// 	 					break;
					case '1':
						//echo " Jan-" . $cur->format("Y");
						$xlbl[] = "Jan";
						$xlblpos[] = $i * $slice;
						break;
					case '4':
						$x2lbl[] = $cur->format("Y");
						$x2lblpos[] = $i * $slice;
						break;
					case '7':
						//echo " Jul";
						$xlbl[] = "Jul";
						$xlblpos[] = $i * $slice;
						break;
				}
				$cur->add(new DateInterval('P1M'));
			}

			$datas = array();
			//print_r($valsBySite);
			foreach($sites as $site) {
				for($i = 0; $i< $slots; $i++){
					if( isset($xdates[$i]) && isset($valsBySite[$site]) && is_array($valsBySite[$site]) && array_key_exists($xdates[$i], $valsBySite[$site]) )
					$datas[$site][] = $valsBySite[$site][$xdates[$i]];
					else
					$datas[$site][] = null;
				}
			}
				
			//echo "count(slots): ". $slots . "<br/>";
			//echo "count(datas): ". count($datas[$site]) ."<br/>";

			// 			foreach($valsBySite as $site => $datevals){
			// 				foreach($sites as $site) {
			// 				 	$datas[$site][] = (array_key_exists($site, $sitevals) ? $sitevals[$site] : null );
			// 				}
			// 			}

			// 			foreach($sites as $site){
			// 				echo "{$site} date count: ". count($datas[$site]) ."<br/>\n";
			// 			}




			$chart = new GoogleChart('lc', 900, 333);
			$chart->setQueryMethod(GoogleChart::POST);
			//$chart->setTitle("{$parameter} x {$region}");

			$chart->setAutoscale(true);
			$chart->setLegendPosition('b');
			//$chart->setScale($paramValMin,$paramValMax);

			//echo "<br/>regMin: {$paramValMin} regMax: {$paramValMax} <br/>";

			$chart->setDataFormat(GoogleChart::EXTENDED_ENCODING);
			// 			if($paramValMin < 0){
			// 				$chart->setGridLines(10, 10, 1, 0, 0, (0 - $paramValMin));
			// 			}
				
				
			// 			// add one line
			// 			//$data = new GoogleChartData(array(49,74,78,71,40,39,35,20,50,61,45));
			// 			//$data2 = new GoogleChartData(array(74,78,null,40,39,35,20,50,61,45,49));
			// 			//$datas = array();
			// 			foreach($valsByDate as $date => $valsites){
			// 				//echo $date ." <br/> ";
			// 				 foreach(array_keys($sites) as $site) {
			// 				 	//echo $site ." | ". $valsByDate[$date][$site] . "<br/>";
			// 				 	//if($valsByDate[$date])
			// 				 }
			// 				 //echo "<br/>";
			// 			}

			$chartDatas = array();
			foreach($sites as $site){
				$chartDatas[$site] = new GoogleChartData($datas[$site]);
				//$chartDatas[$site]->setScale($regMin[$region], $regMax[$region]);
				$chartDatas[$site]->setColor(_random_color());
				$chartDatas[$site]->setLegend($site);
				$chart->addData($chartDatas[$site]);
			}

			//$data3 = new GoogleChartData(array(null));
			//$chart->addData($data);
			//$chart->addData($data2);

			// 			foreach($sites as $site){
			// 				$chart->addData($chartDatas[$site]);
			// 			}



			//$data = new GoogleChartData(array(0,10,20,30,32,38,50,0,-2,0,0,0,0,1,2,3,4,5,6,7,8,9,10));

			//$data->setAutoscale(false);
			//$chart->addData($data);
			// 			$chart->addData($chartDatas[$sites[0]]);
			// 			$chart->addData($chartDatas[$sites[1]]);
			// 			$chart->addData($chartDatas[$sites[2]]);
			// 			$chart->addData($chartDatas[$sites[3]]);

			// customize y axis
			$y_axis = new GoogleChartAxis('y');
			//$y_axis->setDrawTickMarks(false)->setLabels(array(0,40,80));
			//$y_axis->setLabels(array("min","zero","median","max"));
			//$y_axis->setLabelPositions(-2,0,round($paramValMax/2,0),round($paramValMax));
			$y_axis->setRange($paramValMin, $paramValMax);
			$chart->addAxis($y_axis);

			// 			$xcount = count($valsByDate);
			// 			$xLabelPos = array();

			// 			$dates = array_keys($valsByDate);
			// 			for($l = 0; $l < $xcount; $l++){
			// 				$xLabelPos[$l] = $l *  100 / ($xcount - 1);
			// 				$d = date_parse($dates[$l]);
			// 				if($d['month'] == 3)
			// 					$xlbl[] = array('Mar', $xLabelPos[$l]);
			// 			}

			// customize x axis
			$x_axis = new GoogleChartAxis('x');
			$x_axis->setTickMarks(5);
			$x_axis->setLabels($xlbl);
			$x_axis->setLabelPositions($xlblpos);
			//$x_axis->set
			$chart->addAxis($x_axis);

			$x2_axis = new GoogleChartAxis('x');
			//$x2_axis->setTickMarks(5);
			$x2_axis->setLabels($x2lbl);
			$x2_axis->setLabelPositions($x2lblpos);
			$chart->addAxis($x2_axis);

			// add a shape marker with a border
			foreach($chartDatas as $site => $data){
				$shape_marker = new GoogleChartShapeMarker(GoogleChartShapeMarker::CIRCLE);
				$shape_marker->setSize(3);
				$shape_marker->setBorder(0);
				$shape_marker->setData($data);
				$shape_marker->setColor($data->getColor());
				$chart->addMarker($shape_marker);
			}

			// 			// add a shape marker with a border
			// 			$shape_marker = new GoogleChartShapeMarker(GoogleChartShapeMarker::CIRCLE);
			// 			$shape_marker->setSize(6);
			// 			$shape_marker->setBorder(2);
			// 			$shape_marker->setData($data2);
			// 			$chart->addMarker($shape_marker);

			// 			// add a value marker
			// 			$value_marker = new GoogleChartTextMarker(GoogleChartTextMarker::VALUE);
			// 			$value_marker->setData($data);
			// 			$chart->addMarker($value_marker);

			// 			// add a value marker
			// 			$value_marker = new GoogleChartTextMarker(GoogleChartTextMarker::VALUE);
			// 			$value_marker->setData($data2);
			// 			$chart->addMarker($value_marker);

			//echo _embed($chart->getImage() , "image/png");

			//echo $chart->toHtml();

			//echo "ERROR: could not create directory";
			$data = $chart->getImage();
			//echo '<img src="'. _embed($data , "image/png") .'" alt=""/>';
			$dir = "public://charts";
			file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
			$tag = "time_{$region}_{$parameter}";
			$filename = "{$tag}.png";
			$file = file_save_data($data, "public://charts/{$filename}",FILE_EXISTS_REPLACE );
			image_path_flush("public://charts/{$filename}");

			//print_r();
			//break;
			// 			if(true){
			// 			var_dump($chart->getQuery());
			// 			printf('<iframe src="%s" width="500" height="200"></iframe>',$chart->getValidationUrl());
			// 			}

			//~ header('Content-Type: image/png');


			//var_dump($autogen);
			// replace or make the data node
			$data = null;

			$val = $tag;
			$data_nid = db_query("select entity_id from {field_data_field_id} where bundle = 'watershed_data' and field_id_value = :param", array(':param' => $val))->fetchField();
			//echo "data_nid: {$data_nid} <br/>";
			if($data_nid)
			$data = node_load($data_nid);
			else {
				$data = new stdClass(); // We create a new node object
				$data->type = "watershed_data";
				//$data->title =
				$data->language = $lang;
				//$data->path = array('alias' => 'your node path'); // Setting a node path
				node_object_prepare($data); // Set some default values.

				$data->field_id[$lang][0]['value'] = $tag;
				//var_dump($data);

			}

			$data->uid = $autogen->uid;


			// Let's add standard body field
			//$data->body[$lang][0]['value'] = 'This is a body text';
			//$data->body[$lang][0]['summary'] = 'Here goes a summary';
			//$data->body[$lang][0]['format'] = 'filtered_html';
			// If field has a format, you need to define it. Here we define a default filtered_html format for a body field

			//$get_region_nid = 'select field_ref_region_nid from field_data_field_ref_region where entity_id = 13;';
			//$region_nid = db_query('select field_ref_region_nid from {field_data_field_ref_region} where entity_id = %d', 12)->fetchField();

			//$nid = db_query('select entity_id from {field_data_field_id} where field_id_value = %s', $val)->fetchField();

			// copy refs from the autogen node
			$data->field_ref_category = $autogen->field_ref_category;
			$data->field_ref_metadata = $autogen->field_ref_metadata;
			$data->field_ref_background = $autogen->field_ref_background;
			$data->field_ref_organization = $autogen->field_ref_organization;

			// 			$data->field_ref_category[$lang][0]['nid'] = $autogen->field_ref_category[$lang][0]['nid'];
			// 			$data->field_ref_metadata[$lang][0]['nid'] = $autogen->field_ref_metadata[$lang][0]['nid'];
			// 			$data->field_ref_background[$lang][0]['nid'] = $autogen->field_ref_background[$lang][0]['nid'];
			// 			$data->field_ref_organization[$lang][0]['nid'] = $autogen->field_ref_organization[$lang][0]['nid'];

			$val = $parameter;
			$param_nid = db_query("select entity_id from {field_data_field_id} where bundle = 'watershed_parameter' and field_id_value = :param", array(':param' => $val))->fetchField();
			$data->field_ref_param[$lang][0]['nid'] =  $param_nid;
			$param_node = node_load($param_nid);

			$val = strtolower(substr($region,0,2))."%";
			$region_nid = db_query("select entity_id from {field_data_field_id} where bundle = 'watershed_region' and field_id_value like :region", array(':region' => $val))->fetchField();
			$data->field_ref_region[$lang][0]['nid'] = $region_nid;
			//$region_node = node_load($region_nid);

			$data->field_file = $autogen->field_file;
			$data->field_chart[$lang][0]['fid'] = $file->fid;

			$vid = db_query("select vid from {taxonomy_vocabulary} where machine_name = :name", array(":name" => 'years'))->fetchField();
			//var_dump($vid);

			$termstart = $start->format('Y');
			//var_dump($termstart);
			$term = (object) array('vid' => $vid, 'name' => $termstart);
			//var_dump($term);
			$tid = db_query("select tid from {taxonomy_term_data} where name = :name", array(":name" => $termstart))->fetchField();
			//var_dump($tid);
			if(!$tid)
			taxonomy_term_save($term);
			else
			$term = taxonomy_term_load($tid);
			//var_dump($term);

			$data->field_tag_start_year[$lang][0]['tid'] = $term->tid;

			$termend = $end->format('Y');
			$term = (object) array('vid' => $vid, 'name' => $termend);
			$tid = db_query("select tid from {taxonomy_term_data} where name = :name", array(":name" => $termend))->fetchField();
			if(!$tid)
			taxonomy_term_save($term);
			else
			$term = taxonomy_term_load($tid);

			$data->field_tag_end_year[$lang][0]['tid'] = $term->tid;

			$data->field_extra_title[$lang][0]['value'] = "Time Series";
			$data->title = $autogen->field_ref_category[$lang][0]['node']->title . ": ". $param_node->title ." ". $autogen->field_ref_organization[$lang][0]['node']->title ." {$region} {$termstart}". ($termstart != $termend ? "-".$termend : '');

			//var_dump($data);


			// 			$termvalues = array('tid' => $termid, 'name' => $termname);
			// 			taxonomy_save_term(&$termvalues);

			//$node->field_tags[$lang][]['tid'] = 1;


			$data = node_submit($data); // Prepare node for a submit
			node_save($data); // After this call we'll get a nid


			$context['sandbox']['regionidx'] = $r;

			//break;
	} // end region

	$context['sandbox']['parameteridx'] = $p;
}



//$context['finished'] = $context['sandbox']['parameteridx'] / $context['sandbox']['parametermax'];
	//drupal_set_message('autogen_line_param_allsites_alltime!!');
	//$context['results']['message'] = 'autogen_line_param_regionsites_alltime!!';
$context['finished'] = 1;

}


function autogen_line_param_stationcat_month_paramcols($autogen, &$context) {
	//drupal_set_message('autogen_line_param_regionsites_alltime!!');

	$libname = 'googlechartphplib';
	$path = libraries_get_path($libname);
	require_once($path ."/lib/GoogleChart.php");
	require_once($path ."/lib/markers/GoogleChartShapeMarker.php");
	require_once($path ."/lib/markers/GoogleChartTextMarker.php");

	$lang = $autogen->language;
	$file_path = drupal_realpath($autogen->field_file[$lang][0]['file']->uri);
	$tablename = db_escape_table(basename($file_path, ".xml"));
	$conn = Database::getConnection('import', 'import');

	if(!isset($context['sandbox']['parameters'])) {

		// get station ids for each stationcat
		$q = 'select {field_data_field_id}.entity_id as site_nid, field_stationcat_value as stationcat, field_id_value as siteid from {field_data_field_id}, {field_data_field_stationcat} where {field_data_field_id}.entity_id = {field_data_field_stationcat}.entity_id order by siteid, stationcat;';
		/*
		 495|LY|16
		496|LY|17
		526|LYT|47
		516|MY|37
		*/
		$regions = array();
		$results = db_query($q);
		foreach($results as $result) {
			$regions[$result->stationcat][] = $result->siteid;
		}
		$context['sandbox']['regions'] = $regions;
		$context['sandbox']['regionidx'] = 0;
		$context['sandbox']['regionmax'] = count($regions);

		$parameters = array();
		$results = $conn->query('select distinct parameter from ' . $tablename . ' where parameter != "NULL"');
		foreach($results as $result) {
			$parameters[] = $result->parameter;
		}
		$context['sandbox']['parameters'] = $parameters;
		$context['sandbox']['parameteridx'] = 0;
		$context['sandbox']['parametermax'] = count($parameters);

	}

	// prepare parameter batch loop vars
	$parameters = $context['sandbox']['parameters'];
	$paramstart = $context['sandbox']['parameteridx'];
	$parammax   = $context['sandbox']['parametermax'];

	$paramProcessNum = 20; // process this number of params per batch
	$paramend = $paramstart + $paramProcessNum;
	if($paramend > $parammax)
	$paramend = $parammax;

	// prepare region batch loop vars
	$regions     = $context['sandbox']['regions'];
	$regionstart = $context['sandbox']['regionidx'];
	$regionmax   = $context['sandbox']['regionmax'];

	$regionProcessNum = 20;
	$regionend = $regionstart + $regionProcessNum;
	if($regionend > $regionmax)
	$regionend = $regionmax;

	for($p = $paramstart; $p < $paramend; $p++) {
		$parameter = $parameters[$p];

		//echo " {$parameter} <br/>";
		// process all regions for this parameter
		$paramValMax = 0;
		$paramValMin = 0;

		// 		$maxsiteregion = null;
		// 		$maxsitecount = 0;

		// 		foreach($regions as $region => $sites){
		// 			$count = count($sites);
		// 			if($count > $maxsitecount){
		// 				$maxsiteregion = $region;
		// 				$maxsitecount = $count;
		// 			}
		// 		}

		//foreach($regions as $region => $sites) {
		for($r = $regionstart; $r < $regionend; $r++) {
			$regionkeys = array_keys($regions);
			$region = $regionkeys[$r];
			$sites = $regions[$region];
			// 			$region = $maxsiteregion;
			// 			$sites = $regions[$region];
			//echo " {$region} <br/>";

			$q = "select strftime('%Y-%m',date) as date, site, result from " . $tablename . ' where parameter = :parameter and (';
			$wheres = array();
			$wheres[':parameter'] = $parameter;
			for($s = 0; $s < count($sites); $s++){
				if($s != 0) $q.= ' or ';

				$varname = ':site' . $s;
				$q .= ' site = ' . $varname;
				$wheres[$varname] = $sites[$s];
			}
			$q .=")";
			$q .=" order by date, site";
			//echo $q ."<br/>";
			//print_r($wheres);


			$results = $conn->query($q, $wheres);
			$valsBySite = array();
			$dates = array();
			$regMax[$region] = 0;
			$regMin[$region] = 0;

			foreach($results as $result){
				// store values
				$valsBySite[$result->site][$result->date] = $result->result;
				$dates[] = $result->date;

				// store max and min for each region and for all regions
				if($result->result > $regMax[$region])
				$regMax[$region] = $result->result;
				else if($result->result < $regMin[$region])
				$regMin[$region] = $result->result;
				if($result->result > $paramValMax)
				$paramValMax = $result->result;
				else if($result->result < $paramValMin)
				$paramValMin = $result->result;
			}


			$start = new DateTime($dates[0]);
			//echo " start: " . $start->format("Y-m-d");
			$end = new DateTime($dates[count($dates)-1]);
			//echo " end: " . $end->format("Y-m-d");
			$diff = $start->diff($end);
			//echo " diff: " . $diff->format("%Y-%m-%d");
			$numMonths = (($diff->y * 12) + $diff->m);
			//echo " months: " . $numMonths;
			$cur = clone $start;

			$xlbl = array();
			$xlblpos = array();
			$x2lbl = array();
			$x2lblpos = array();
			$slots = $numMonths + 2;
			$slice = 100/$slots;
			$slicei = 1;
			$xdates = array();

			for($i = 1; $i < $slots - 1; $i++){
				$xdates[$i] = $cur->format("Y-m");
				switch($cur->format("m")){
					// 					case '3':
					// 	 					echo " Mar";
					// 	 					$xlbl[] = "Mar";
					// 	 					$xlblpos[] = $i * $slice;
					// 	 					break;
					case '1':
						//echo " Jan-" . $cur->format("Y");
						$xlbl[] = "Jan";
						$xlblpos[] = $i * $slice;
						break;
					case '4':
						$x2lbl[] = $cur->format("Y");
						$x2lblpos[] = $i * $slice;
						break;
					case '7':
						//echo " Jul";
						$xlbl[] = "Jul";
						$xlblpos[] = $i * $slice;
						break;
				}
				$cur->add(new DateInterval('P1M'));
			}

			$datas = array();
			//print_r($valsBySite);
			foreach($sites as $site) {
				for($i = 0; $i< $slots; $i++){
					if( isset($xdates[$i]) && isset($valsBySite[$site]) && is_array($valsBySite[$site]) && array_key_exists($xdates[$i], $valsBySite[$site]) )
					$datas[$site][] = $valsBySite[$site][$xdates[$i]];
					else
					$datas[$site][] = null;
				}
			}

			//echo "count(slots): ". $slots . "<br/>";
			//echo "count(datas): ". count($datas[$site]) ."<br/>";

			// 			foreach($valsBySite as $site => $datevals){
			// 				foreach($sites as $site) {
			// 				 	$datas[$site][] = (array_key_exists($site, $sitevals) ? $sitevals[$site] : null );
			// 				}
			// 			}

			// 			foreach($sites as $site){
			// 				echo "{$site} date count: ". count($datas[$site]) ."<br/>\n";
			// 			}




			$chart = new GoogleChart('lc', 900, 333);
			$chart->setQueryMethod(GoogleChart::POST);
			//$chart->setTitle("{$parameter} x {$region}");

			$chart->setAutoscale(true);
			$chart->setLegendPosition('b');
			//$chart->setScale($paramValMin,$paramValMax);

			//echo "<br/>regMin: {$paramValMin} regMax: {$paramValMax} <br/>";

			$chart->setDataFormat(GoogleChart::EXTENDED_ENCODING);
			// 			if($paramValMin < 0){
			// 				$chart->setGridLines(10, 10, 1, 0, 0, (0 - $paramValMin));
			// 			}


			// 			// add one line
			// 			//$data = new GoogleChartData(array(49,74,78,71,40,39,35,20,50,61,45));
			// 			//$data2 = new GoogleChartData(array(74,78,null,40,39,35,20,50,61,45,49));
			// 			//$datas = array();
			// 			foreach($valsByDate as $date => $valsites){
			// 				//echo $date ." <br/> ";
			// 				 foreach(array_keys($sites) as $site) {
			// 				 	//echo $site ." | ". $valsByDate[$date][$site] . "<br/>";
			// 				 	//if($valsByDate[$date])
			// 				 }
			// 				 //echo "<br/>";
			// 			}

			$chartDatas = array();
			foreach($sites as $site){
				$chartDatas[$site] = new GoogleChartData($datas[$site]);
				//$chartDatas[$site]->setScale($regMin[$region], $regMax[$region]);
				$chartDatas[$site]->setColor(_random_color());
				$chartDatas[$site]->setLegend($site);
				$chart->addData($chartDatas[$site]);
			}

			//$data3 = new GoogleChartData(array(null));
			//$chart->addData($data);
			//$chart->addData($data2);

			// 			foreach($sites as $site){
			// 				$chart->addData($chartDatas[$site]);
			// 			}



			//$data = new GoogleChartData(array(0,10,20,30,32,38,50,0,-2,0,0,0,0,1,2,3,4,5,6,7,8,9,10));

			//$data->setAutoscale(false);
			//$chart->addData($data);
			// 			$chart->addData($chartDatas[$sites[0]]);
			// 			$chart->addData($chartDatas[$sites[1]]);
			// 			$chart->addData($chartDatas[$sites[2]]);
			// 			$chart->addData($chartDatas[$sites[3]]);

			// customize y axis
			$y_axis = new GoogleChartAxis('y');
			//$y_axis->setDrawTickMarks(false)->setLabels(array(0,40,80));
			//$y_axis->setLabels(array("min","zero","median","max"));
			//$y_axis->setLabelPositions(-2,0,round($paramValMax/2,0),round($paramValMax));
			$y_axis->setRange($paramValMin, $paramValMax);
			$chart->addAxis($y_axis);

			// 			$xcount = count($valsByDate);
			// 			$xLabelPos = array();

			// 			$dates = array_keys($valsByDate);
			// 			for($l = 0; $l < $xcount; $l++){
			// 				$xLabelPos[$l] = $l *  100 / ($xcount - 1);
			// 				$d = date_parse($dates[$l]);
			// 				if($d['month'] == 3)
			// 					$xlbl[] = array('Mar', $xLabelPos[$l]);
			// 			}

			// customize x axis
			$x_axis = new GoogleChartAxis('x');
			$x_axis->setTickMarks(5);
			$x_axis->setLabels($xlbl);
			$x_axis->setLabelPositions($xlblpos);
			//$x_axis->set
			$chart->addAxis($x_axis);

			$x2_axis = new GoogleChartAxis('x');
			//$x2_axis->setTickMarks(5);
			$x2_axis->setLabels($x2lbl);
			$x2_axis->setLabelPositions($x2lblpos);
			$chart->addAxis($x2_axis);

			// add a shape marker with a border
			foreach($chartDatas as $site => $data){
				$shape_marker = new GoogleChartShapeMarker(GoogleChartShapeMarker::CIRCLE);
				$shape_marker->setSize(3);
				$shape_marker->setBorder(0);
				$shape_marker->setData($data);
				$shape_marker->setColor($data->getColor());
				$chart->addMarker($shape_marker);
			}

			// 			// add a shape marker with a border
			// 			$shape_marker = new GoogleChartShapeMarker(GoogleChartShapeMarker::CIRCLE);
			// 			$shape_marker->setSize(6);
			// 			$shape_marker->setBorder(2);
			// 			$shape_marker->setData($data2);
			// 			$chart->addMarker($shape_marker);

			// 			// add a value marker
			// 			$value_marker = new GoogleChartTextMarker(GoogleChartTextMarker::VALUE);
			// 			$value_marker->setData($data);
			// 			$chart->addMarker($value_marker);

			// 			// add a value marker
			// 			$value_marker = new GoogleChartTextMarker(GoogleChartTextMarker::VALUE);
			// 			$value_marker->setData($data2);
			// 			$chart->addMarker($value_marker);

			//echo _embed($chart->getImage() , "image/png");

			//echo $chart->toHtml();

			//echo "ERROR: could not create directory";
			$data = $chart->getImage();
			//echo '<img src="'. _embed($data , "image/png") .'" alt=""/>';
			$dir = "public://charts";
			file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
			$tag = "time_{$region}_{$parameter}";
			$filename = "{$tag}.png";
			$file = file_save_data($data, "public://charts/{$filename}",FILE_EXISTS_REPLACE );
			image_path_flush("public://charts/{$filename}");

			//print_r();
			//break;
			// 			if(true){
			// 			var_dump($chart->getQuery());
			// 			printf('<iframe src="%s" width="500" height="200"></iframe>',$chart->getValidationUrl());
			// 			}

			//~ header('Content-Type: image/png');


			//var_dump($autogen);
			// replace or make the data node
			$data = null;

			$val = $tag;
			$data_nid = db_query("select entity_id from {field_data_field_id} where bundle = 'watershed_data' and field_id_value = :param", array(':param' => $val))->fetchField();
			//echo "data_nid: {$data_nid} <br/>";
			if($data_nid)
			$data = node_load($data_nid);
			else {
				$data = new stdClass(); // We create a new node object
				$data->type = "watershed_data";
				//$data->title =
				$data->language = $lang;
				//$data->path = array('alias' => 'your node path'); // Setting a node path
				node_object_prepare($data); // Set some default values.

				$data->field_id[$lang][0]['value'] = $tag;
				//var_dump($data);

			}

			$data->uid = $autogen->uid;


			// Let's add standard body field
			//$data->body[$lang][0]['value'] = 'This is a body text';
			//$data->body[$lang][0]['summary'] = 'Here goes a summary';
			//$data->body[$lang][0]['format'] = 'filtered_html';
			// If field has a format, you need to define it. Here we define a default filtered_html format for a body field

			//$get_region_nid = 'select field_ref_region_nid from field_data_field_ref_region where entity_id = 13;';
			//$region_nid = db_query('select field_ref_region_nid from {field_data_field_ref_region} where entity_id = %d', 12)->fetchField();

			//$nid = db_query('select entity_id from {field_data_field_id} where field_id_value = %s', $val)->fetchField();

			// copy refs from the autogen node
			$data->field_ref_category = $autogen->field_ref_category;
			$data->field_ref_metadata = $autogen->field_ref_metadata;
			$data->field_ref_background = $autogen->field_ref_background;
			$data->field_ref_organization = $autogen->field_ref_organization;

			// 			$data->field_ref_category[$lang][0]['nid'] = $autogen->field_ref_category[$lang][0]['nid'];
			// 			$data->field_ref_metadata[$lang][0]['nid'] = $autogen->field_ref_metadata[$lang][0]['nid'];
			// 			$data->field_ref_background[$lang][0]['nid'] = $autogen->field_ref_background[$lang][0]['nid'];
			// 			$data->field_ref_organization[$lang][0]['nid'] = $autogen->field_ref_organization[$lang][0]['nid'];

			$val = $parameter;
			$param_nid = db_query("select entity_id from {field_data_field_id} where bundle = 'watershed_parameter' and field_id_value = :param", array(':param' => $val))->fetchField();
			$data->field_ref_param[$lang][0]['nid'] =  $param_nid;
			$param_node = node_load($param_nid);

			$val = strtolower(substr($region,0,2))."%";
			$region_nid = db_query("select entity_id from {field_data_field_id} where bundle = 'watershed_region' and field_id_value like :region", array(':region' => $val))->fetchField();
			$data->field_ref_region[$lang][0]['nid'] = $region_nid;
			//$region_node = node_load($region_nid);

			$data->field_file = $autogen->field_file;
			$data->field_chart[$lang][0]['fid'] = $file->fid;

			$vid = db_query("select vid from {taxonomy_vocabulary} where machine_name = :name", array(":name" => 'years'))->fetchField();
			//var_dump($vid);

			$termstart = $start->format('Y');
			//var_dump($termstart);
			$term = (object) array('vid' => $vid, 'name' => $termstart);
			//var_dump($term);
			$tid = db_query("select tid from {taxonomy_term_data} where name = :name", array(":name" => $termstart))->fetchField();
			//var_dump($tid);
			if(!$tid)
			taxonomy_term_save($term);
			else
			$term = taxonomy_term_load($tid);
			//var_dump($term);

			$data->field_tag_start_year[$lang][0]['tid'] = $term->tid;

			$termend = $end->format('Y');
			$term = (object) array('vid' => $vid, 'name' => $termend);
			$tid = db_query("select tid from {taxonomy_term_data} where name = :name", array(":name" => $termend))->fetchField();
			if(!$tid)
			taxonomy_term_save($term);
			else
			$term = taxonomy_term_load($tid);

			$data->field_tag_end_year[$lang][0]['tid'] = $term->tid;

			$data->field_extra_title[$lang][0]['value'] = "Time Series";
			$data->title = $autogen->field_ref_category[$lang][0]['node']->title . ": ". $param_node->title ." ". $autogen->field_ref_organization[$lang][0]['node']->title ." {$region} {$termstart}". ($termstart != $termend ? "-".$termend : '');

			//var_dump($data);


			// 			$termvalues = array('tid' => $termid, 'name' => $termname);
			// 			taxonomy_save_term(&$termvalues);

			//$node->field_tags[$lang][]['tid'] = 1;


			$data = node_submit($data); // Prepare node for a submit
			node_save($data); // After this call we'll get a nid


			$context['sandbox']['regionidx'] = $r;

			//break;
		} // end region

		$context['sandbox']['parameteridx'] = $p;
	}



	//$context['finished'] = $context['sandbox']['parameteridx'] / $context['sandbox']['parametermax'];
	//drupal_set_message('autogen_line_param_allsites_alltime!!');
	//$context['results']['message'] = 'autogen_line_param_regionsites_alltime!!';
	$context['finished'] = 1;

}

function autogen_line_param_allsites_alltime($autogen, &$context) {
	drupal_set_message('autogen_line_param_allsites_alltime!!');
	$context['finished'] = 1;
}

function autogen_box_param_region_alltime($autogen, &$context) {
	drupal_set_message('autogen_box_param_region_alltime!!');
	$context['finished'] = 1;
}

function autogen_box_param_allsites_alltime($autogen, &$context) {
	drupal_set_message('autogen_box_param_allsites_alltime!!');
	$context['finished'] = 1;
}


function autogen_finished_callback($success, $results, $operations) {

	if ($success) {
		$message = t('Complete.'); // . count($results['values']));
	}
	else {
		$message = t('Finished with error.');
	}
	drupal_set_message($message);
}

/**
 * Implements hook_permission().
 */
function watershed_permission(){
	return array(
	// 			'access watershed content' => array(
	// 					'title' => t('Access content for the Watershed module'),
	// 			),
			'auto generate data records' => array(
					'title' => t(' Data Records based on Autogen Source Data'),
	)
	);
}

// /**
//  * Custom page callback function, declared in rimdb_menu().
//  */
// function _watershed_posts_page() {
// 	$result = watershed_block_contents('page');
// 	//Array to contain items for the page to render.
// 	$items = array();
// 	//Iterate over the resultset and format as links.
// 	foreach ($result as $node) {
// 		$items[] = array(
// 				'data' => l($node->title, 'node/' . $node->nid),
// 		);
// 	}

// 	if (empty($items)) { //No content in the last week.
// 		$page_array['watershed_posts_arguments'] = array(
// 		//Title serves as page subtitle
// 				'#title' => t('All posts from the last week'),
// 				'#markup' => t('No posts available.'),
// 		);
// 		return $page_array;
// 	}
// 	else {
// 		$page_array['watershed_posts_arguments'] = array(
// 				'#title' => t('All posts from the last week'),
// 				'#items' => $items,
// 				//Theme hook with suggestion.
// 				'#theme' => 'item_list__watershed_posts',
// 		);
// 		return $page_array;
// 	}
// }

